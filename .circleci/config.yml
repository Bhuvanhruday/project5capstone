version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-eks: circleci/aws-eks@2.2.0  
  kubernetes: circleci/kubernetes@1.3

jobs:
    run-lint:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: install dependencies
            command: |
              sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
              sudo chmod +x /bin/hadolint
        - run:
            name: Run Lint
            command: |
              /bin/hadolint Dockerfile
    build-local-app:
      docker:
        - image: cimg/base:2022.06
      steps:
        - checkout
        - attach_workspace:
            at: ~/
        - run:
            name: 'install nginx'
            command: |
              sudo apt-get update -y
              sudo apt-get install -y nginx
              sudo apt-get install -y curl         
              
        - run:
            name: 'build-app-locally'
            command: |
              
              sudo cp ./nginx.conf /etc/nginx/nginx.conf
              sudo cp -r ./www /www
        - run:
            name: 'run-local-app'
            command: |
              sudo nginx -t 
              sudo service nginx start
        - run:
            name: 'test-local-app'
            command: |
               export URL="http://localhost:80"
               if curl -s ${URL} | grep "Hello"
               then
                 echo "success"
               else
                 echo "fail"
               fi
               sudo cat /var/log/nginx/error.log
               sudo cat /usr/share/nginx/html/index.html
        
    build-docker-image:
       docker:
         - image: circleci/node:13.8.0
       steps:
         - checkout
         - setup_remote_docker:
              version: 19.03.13
         - run:
             name: Build Docker Image
             command: |
                export TAG=${CIRCLE_BUILD_NUM}
                export IMAGE_NAME=project5capstone
                docker build -t bmailazhagan/$IMAGE_NAME:$TAG .
    push-docker-image:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - setup_remote_docker:
            version: 19.03.13
        - run:
            name: Push Docker Image to Docker Hub
            command: |
              export TAG=v${CIRCLE_BUILD_NUM}
              export IMAGE_NAME=project5capstone
              docker build -t bmailazhagan/$IMAGE_NAME .
              docker login -u bmailazhagan -p Welcome01
              docker push bmailazhagan/$IMAGE_NAME

    create-cluster-eks:
      docker:
        - image: 'cimg/python:3.10'
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
      steps:      
        - attach_workspace:
            at: ~/
        - aws-eks/create-cluster:
            cluster-name: eks-orb-capstone-project-deployment-${CIRCLE_WORKFLOW_ID:0:7}
            aws-region: 'us-east-1'
            zones: 'us-east-1a,us-east-1b'
            skip-kubectl-install: false
            show-eksctl-command: true
            verbose: 3
            node-type: t2.micro
            nodes-max: 2
            external-dns-access: true
        
    deploy-application:
      docker:
      # Use the same Docker base as the project
        - image: python:3.7.3-stretch
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
        docker-image-name:
          description: |
            Name of the docker image to be deployed
          type: string
        version-info:
          description: |
            App version information
          type: string
        aws-region:
          description: |
            AWS region
          type: string
          default: "us-east-1"
      steps:   
        - checkout     
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: eks-orb-capstone-project-deployment-${CIRCLE_WORKFLOW_ID:0:7}
            install-kubectl: true
            aws-region: << parameters.aws-region >>
        - run:
            name: ' kubectl nodes'
            command: |
              kubectl version --short --client
              aws eks update-kubeconfig --name eks-orb-capstone-project-deployment-${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1
              kubectl get nodes -o wide

        - run:
            name: 'deploy to cluster'
            command: |
               kubectl create deployment project5capstone --image=bmailazhagan/project5capstone
               kubectl run project5capstone  --image=bmailazhagan/project5capstone --port=80

        - run:
            name: 'Expose Deployment As LoadBalancer'
            command: |   
               kubectl get nodes -o wide           
               kubectl get deploy,pods
               kubectl get deployments               
               kubectl expose deployment project5capstone --type=LoadBalancer --port=80               
               kubectl get svc project5capstone -o json
       
    
    test-application:
        docker:
      # Use the same Docker base as the project
          - image: python:3.7.3-stretch
        parameters:
          cluster-name:
            description: |
              Name of the EKS cluster
            type: string
          aws-region:
            description: |
              AWS region
            type: string
            default: ""
          expected-version-info:
            description: |
              Expected app version (this is used for testing that the
              correct version has been deployed)
            type: string
        steps:
          - aws-eks/update-kubeconfig-with-authenticator:
              cluster-name: eks-orb-capstone-project-deployment-${CIRCLE_WORKFLOW_ID:0:7}
              install-kubectl: true
              aws-region: << parameters.aws-region >>
          - run:
              name: Wait for service to be ready
              command: |
                kubectl get pods                
                kubectl get svc project5capstone -o json
                kubectl get pods -o wide
                git describe project5capstone
    undeploy-application:
      docker:
      # Use the same Docker base as the project
        - image: python:3.7.3-stretch
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
        aws-region:
          description: |
            AWS region
          type: string
          default: ""
      steps:
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: << parameters.cluster-name >>
            install-kubectl: true
            aws-region: << parameters.aws-region >>
        - kubernetes/delete-resource:
            resource-types: "deployment,service"
            label-selector: "app=capstone"
            wait: true
        - run:
            name: Check on pod status
            command: |
              kubectl get pods
workflows:
  default:
    jobs:
      - run-lint
      - build-local-app
      - build-docker-image
      - push-docker-image:
          requires:
            - "build-docker-image"     
          
      - create-cluster-eks:
          cluster-name: eks-orb-capstone-project-deployment-${CIRCLE_WORKFLOW_ID:0:7}
          requires:
            - "build-docker-image"  
          
      - deploy-application:
          cluster-name: eks-orb-capstone-project-deployment-${CIRCLE_WORKFLOW_ID:0:7}
          aws-region: $AWS_DEFAULT_REGION
          docker-image-name: bmailazhagan/$IMAGE_NAME:$TAG
          version-info: "${CIRCLE_SHA1}"
          requires:
            - create-cluster-eks
      - test-application:
          cluster-name: eks-orb-capstone-project-deployment-${CIRCLE_WORKFLOW_ID:0:7}
          aws-region: $AWS_DEFAULT_REGION
          expected-version-info: "${CIRCLE_SHA1}"
          requires:
            - deploy-application
      # - undeploy-application:
      #     cluster-name: eks-orb-capstone-project-deployment-${CIRCLE_WORKFLOW_ID:0:7}
      #     aws-region: $AWS_DEFAULT_REGION
      #     requires:
      #      - test-application
      # - aws-eks/delete-cluster:
      #     cluster-name: eks-orb-capstone-project-deployment-${CIRCLE_WORKFLOW_ID:0:7}
      #     aws-region: $AWS_DEFAULT_REGION
      #     wait: true
      #     requires:
      #       - undeploy-application
